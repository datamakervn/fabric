const Anthropic = require('@anthropic-ai/sdk');
const config = require('../config/xmla.config');

class ClaudeService {
  constructor() {
    this.client = new Anthropic({
      apiKey: config.claude.apiKey,
    });
  }

  // Generate DAX query from natural language
  async generateDAXQuery(userQuestion, datasetMetadata) {
    const systemPrompt = `B·∫°n l√† chuy√™n gia Power BI v√† DAX. Nhi·ªám v·ª• c·ªßa b·∫°n l√† chuy·ªÉn c√¢u h·ªèi c·ªßa user th√†nh DAX query.

Dataset c√≥ s·∫µn:
- Table: 'A1_KQKD (month)' v·ªõi c√°c columns: Month, Ch·ªâ ti√™u, [c√°c measures]
- Measures: [1.Doanh thu thu·∫ßn], [2.Gi√° v·ªën h√†ng b√°n], [3.L·ª£i nhu·∫≠n sau thu·∫ø], [4.T·ª∑ su·∫•t l·ª£i nhu·∫≠n%]

Quy t·∫Øc:
1. LU√îN b·∫Øt ƒë·∫ßu v·ªõi EVALUATE
2. S·ª≠ d·ª•ng TOPN, FILTER, SUMMARIZE ph√π h·ª£p
3. Tr·∫£ v·ªÅ JSON: { "dax": "...", "explanation": "..." }
4. DAX ph·∫£i ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu, kh√¥ng qu√° 5 d√≤ng
5. Limit k·∫øt qu·∫£ max 100 rows v·ªõi TOPN

V√≠ d·ª•:
User: "Doanh thu 3 th√°ng g·∫ßn nh·∫•t"
Response: {
  "dax": "EVALUATE TOPN(3, 'A1_KQKD (month)', 'A1_KQKD (month)'[Month], DESC)",
  "explanation": "Query l·∫•y 3 th√°ng g·∫ßn nh·∫•t t·ª´ b·∫£ng KQKD"
}`;

    try {
      const response = await this.client.messages.create({
        model: config.claude.model,
        max_tokens: 1024,
        system: systemPrompt,
        messages: [
          {
            role: 'user',
            content: userQuestion,
          },
        ],
      });

      const content = response.content[0].text;
      
      // Parse JSON response
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      }

      throw new Error('Could not parse DAX query from Claude response');
    } catch (error) {
      console.error('Claude DAX Generation Error:', error);
      throw error;
    }
  }

  // Analyze query results and generate insights
  async analyzeResults(userQuestion, queryResults, metadata) {
    const systemPrompt = `B·∫°n l√† chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu t√†i ch√≠nh Power BI.

QUAN TR·ªåNG - QUY T·∫ÆC FORMAT:
1. Tr√¨nh b√†y r√µ r√†ng, d·ªÖ ƒë·ªçc, professional
2. S·ª¨ D·ª§NG √çT EMOJI - ch·ªâ d√πng 1-2 emoji quan tr·ªçng
3. D√πng markdown: **bold**, ## headers, - bullet points
4. S·ªë li·ªáu: format ƒë·∫πp v·ªõi d·∫•u ph·∫©y ngƒÉn c√°ch h√†ng ngh√¨n
5. Ph√¢n t√≠ch ng·∫Øn g·ªçn, ƒëi th·∫≥ng v√†o v·∫•n ƒë·ªÅ
6. Kh√¥ng d√πng c√°c k√Ω hi·ªáu l·∫° nh∆∞ ###, ***, üîç, üí°, etc

C·∫§U TR√öC RESPONSE:
## [Ti√™u ƒë·ªÅ ng·∫Øn g·ªçn]

**K·∫øt qu·∫£ ch√≠nh:**
- ƒêi·ªÉm 1
- ƒêi·ªÉm 2

**Ph√¢n t√≠ch:**
[Ph√¢n t√≠ch ng·∫Øn g·ªçn 2-3 c√¢u]

**Khuy·∫øn ngh·ªã:**
[1-2 action items c·ª• th·ªÉ]

---
Query: [DAX query]
Rows: [s·ªë rows]`;

    try {
      const dataContext = `
User Question: ${userQuestion}

Query Results (first 20 rows):
${JSON.stringify(queryResults.data.slice(0, 20), null, 2)}

Total Rows: ${queryResults.rowCount}
`;

      const response = await this.client.messages.create({
        model: config.claude.model,
        max_tokens: config.claude.maxTokens,
        system: systemPrompt,
        messages: [
          {
            role: 'user',
            content: `Ph√¢n t√≠ch d·ªØ li·ªáu sau v√† tr·∫£ l·ªùi c√¢u h·ªèi. Nh·ªõ format ƒë·∫πp, d·ªÖ ƒë·ªçc:\n\n${dataContext}`,
          },
        ],
      });

      return response.content[0].text;
    } catch (error) {
      console.error('Claude Analysis Error:', error);
      throw error;
    }
  }
} 

module.exports = new ClaudeService();