const express = require('express');
const router = express.Router();
const Anthropic = require('@anthropic-ai/sdk');
const xmlaService = require('../services/xmlaService');
const schemaService = require('../services/schemaService'); // ‚Üê NEW

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

// Helper: Format query result for Claude
function formatQueryResultForClaude(queryResult, userMessage) {
  if (!queryResult || !queryResult.data || queryResult.data.length === 0) {
    return '‚ö†Ô∏è Query kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu.';
  }

  let context = `üìä **D·ªÆ LI·ªÜU T·ª™ POWER BI (${queryResult.rowCount} rows):**\n\n`;

  queryResult.data.forEach((row, index) => {
    context += `**Row ${index + 1}:**\n`;
    
    for (const [key, value] of Object.entries(row)) {
      const cleanKey = key.replace(/^.*?\[|\]$/g, '');
      
      let formattedValue = value;
      
      // Format Value to billions
      if (cleanKey === 'Value' && typeof value === 'number') {
        const billions = value / 1000000000; //chia cho 1 t·ª∑
        formattedValue = `${billions.toFixed(2)} t·ª∑ ƒë·ªìng (${value.toLocaleString('vi-VN')} ƒë·ªìng)`;
      } 
      // Format Month
      else if (cleanKey === 'Month' && value) {
        const date = new Date(value);
        formattedValue = `${String(date.getMonth() + 1).padStart(2, '0')}/${date.getFullYear()}`;
      }
      // Format percentage values
      else if (typeof value === 'number' && (cleanKey.toLowerCase().includes('rate') || cleanKey.toLowerCase().includes('ratio') || cleanKey.toLowerCase().includes('%'))) {
        formattedValue = `${(value * 100).toFixed(2)}%`;
      }
      
      context += `  - ${cleanKey}: ${formattedValue}\n`;
    }
    context += '\n';
  });

  context += `‚ö†Ô∏è **CRITICAL:** S·ª≠ d·ª•ng ƒê√öNG s·ªë li·ªáu t·ª´ data tr√™n. KH√îNG ƒëo√°n m√≤!\n`;
  context += `V√≠ d·ª•: N·∫øu Value = 478978249082 ‚Üí ph·∫£i vi·∫øt "478.98 t·ª∑ ƒë·ªìng"\n`;

  return context;
}

// POST /api/chat - Main chat endpoint
router.post('/', async (req, res) => {
  try {
    const { message } = req.body;
    
    if (!message) {
      return res.status(400).json({
        success: false,
        error: 'Message is required'
      });
    }

    console.log('üì© User message:', message);

    // Build DYNAMIC prompt based on user query
    const systemPrompt = schemaService.buildDynamicPrompt(message);
    const promptSize = (systemPrompt.length / 1024).toFixed(2);
    console.log(`üìã Dynamic prompt built (${promptSize} KB)`);

    // STEP 1: Generate DAX query
    console.log('üîÑ Step 1: Generating DAX query...');
    
    const claudeResponse1 = await anthropic.messages.create({
      model: 'claude-sonnet-4-20250514',
      max_tokens: 2048,
      system: systemPrompt,
      messages: [{
        role: 'user',
        content: `${message}

Generate ONLY the DAX query. No analysis yet.`
      }]
    });

    const daxText = claudeResponse1.content[0].text;
    
    // Extract DAX query
    const daxMatch = daxText.match(/```(?:dax)?\s*(EVALUATE[\s\S]+?)```/i) ||
                     daxText.match(/(EVALUATE[\s\S]+)/i);
    
    if (!daxMatch) {
      return res.json({
        success: false,
        response: 'Kh√¥ng th·ªÉ t·∫°o DAX query t·ª´ c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng h·ªèi r√µ r√†ng h∆°n v·ªÅ d·ªØ li·ªáu t√†i ch√≠nh.'
      });
    }

    const daxQuery = daxMatch[1].trim();
    console.log('‚úÖ DAX Query generated');
    console.log(daxQuery);

    // STEP 2: Execute query
    console.log('üîÑ Step 2: Executing DAX query...');
    
    let queryResult;
    try {
      queryResult = await xmlaService.executeDAXQuery(daxQuery);
      console.log(`‚úÖ Query executed: ${queryResult.rowCount} rows returned`);
    } catch (queryError) {
      console.error('‚ùå Query execution failed:', queryError.message);
      return res.json({
        success: false,
        response: `L·ªói khi th·ª±c thi query:\n\n${queryError.message}\n\nVui l√≤ng th·ª≠ l·∫°i ho·∫∑c h·ªèi c√¢u h·ªèi kh√°c.`
      });
    }

    // STEP 3: Format data for Claude
    const dataContext = formatQueryResultForClaude(queryResult, message);
    console.log('üìä Data formatted for Claude');

    // STEP 4: Analyze with Claude using actual data
    console.log('üîÑ Step 3: Analyzing data with Claude...');
    
    const claudeResponse2 = await anthropic.messages.create({
      model: 'claude-sonnet-4-20250514',
      max_tokens: 4096,
      system: systemPrompt,
      messages: [{
        role: 'user',
        content: `C√¢u h·ªèi c·ªßa user: ${message}

${dataContext}

Ph√¢n t√≠ch k·∫øt qu·∫£ tr√™n v√† tr·∫£ l·ªùi c√¢u h·ªèi.

‚ö†Ô∏è CRITICAL RULES:
1. S·ª≠ d·ª•ng ƒê√öNG s·ªë li·ªáu t·ª´ data tr√™n
2. Convert sang t·ª∑ ƒë·ªìng nh∆∞ ƒë√£ format
3. KH√îNG ƒëo√°n m√≤ ho·∫∑c t·ª± nghƒ© s·ªë li·ªáu
4. Format theo template ƒë√£ ƒë·ªãnh
5. KH√îNG bao g·ªìm DAX query code trong response

B·∫Øt ƒë·∫ßu response v·ªõi business analysis, kh√¥ng c√≥ code blocks.`
      }]
    });

    let finalResponse = claudeResponse2.content[0].text;

    // Clean up response (remove any technical details if leaked)
    finalResponse = finalResponse
      .replace(/```(?:dax)?\s*EVALUATE[\s\S]*?```/gi, '')
      .replace(/üìå \*\*Query:\*\*.*?\n/gi, '')
      .replace(/‚úÖ \*\*Retrieved.*?\n/gi, '')
      .replace(/\n{3,}/g, '\n\n')
      .trim();

    console.log('‚úÖ Analysis completed');

    // Return response
    res.json({
      success: true,
      response: finalResponse,
      data: queryResult.data,
      rowCount: queryResult.rowCount
    });

  } catch (error) {
    console.error('‚ùå Chat endpoint error:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Internal server error'
    });
  }
});

// GET /api/chat - For testing in browser
router.get('/', (req, res) => {
  res.json({
    success: true,
    message: 'Power BI Chat API is running',
    endpoint: 'POST /api/chat/',
    usage: 'Send POST request with body: {"message": "your question"}'
  });
});

// GET /api/chat/health - Health check
router.get('/health', (req, res) => {
  res.json({
    success: true,
    status: 'Chat API is running',
    timestamp: new Date().toISOString()
  });
});

// GET /api/chat/measures/search?q=ros - Search measures by keyword
router.get('/measures/search', (req, res) => {
  try {
    const { q } = req.query;
    
    if (!q) {
      return res.status(400).json({
        success: false,
        error: 'Query parameter "q" is required',
        example: '/api/chat/measures/search?q=ros'
      });
    }
    
    const results = schemaService.searchMeasures(q);
    
    res.json({
      success: true,
      query: q,
      results,
      count: results.length
    });
  } catch (error) {
    console.error('‚ùå Measure search error:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// GET /api/chat/measures/by-table - Get all measures grouped by table
router.get('/measures/by-table', (req, res) => {
  try {
    const grouped = schemaService.getMeasuresByTable();
    
    // Calculate total measures
    const totalMeasures = Object.values(grouped).reduce((sum, measures) => sum + measures.length, 0);
    
    res.json({
      success: true,
      data: grouped,
      tableCount: Object.keys(grouped).length,
      totalMeasures: totalMeasures
    });
  } catch (error) {
    console.error('‚ùå Measures by table error:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// GET /api/chat/schema/stats - Get schema statistics
router.get('/schema/stats', (req, res) => {
  try {
    const stats = schemaService.getStatistics();
    
    res.json({
      success: true,
      ...stats
    });
  } catch (error) {
    console.error('‚ùå Schema stats error:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// GET /api/chat/schema/tables - Get all table names
router.get('/schema/tables', (req, res) => {
  try {
    const tables = Object.keys(schemaService.fullSchema.tables);
    
    res.json({
      success: true,
      tables,
      count: tables.length
    });
  } catch (error) {
    console.error('‚ùå Schema tables error:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// GET /api/chat/schema/table/:tableName - Get specific table details
router.get('/schema/table/:tableName', (req, res) => {
  try {
    const { tableName } = req.params;
    
    if (!schemaService.fullSchema.tables[tableName]) {
      return res.status(404).json({
        success: false,
        error: `Table "${tableName}" not found`
      });
    }
    
    const tableInfo = schemaService.fullSchema.tables[tableName];
    
    res.json({
      success: true,
      tableName,
      ...tableInfo,
      columnCount: tableInfo.columns.length,
      measureCount: tableInfo.measures.length
    });
  } catch (error) {
    console.error('‚ùå Table details error:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// POST /api/chat/schema/refresh - Refresh schema from file (for development)
router.post('/schema/refresh', (req, res) => {
  try {
    schemaService.loadSchema();
    const stats = schemaService.getStatistics();
    
    res.json({
      success: true,
      message: 'Schema refreshed successfully',
      ...stats
    });
  } catch (error) {
    console.error('‚ùå Schema refresh error:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

module.exports = router;
